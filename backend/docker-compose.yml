services:
  mysql:
    image: mysql:5.7
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: hotel
      MYSQL_USER: is213
      MYSQL_PASSWORD: 
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
  booking_service:
    build:
      context: ./
      dockerfile: Dockerfile
    image: hotel/booking_service:1.0
    container_name: booking_service
    depends_on:
      - mysql
    ports:
      - "5002:5002"
    environment:
      - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/hotel

  checkin_service:
    build:
      context: ./
      dockerfile: Dockerfile
    image: hotel/checkin_service:1.0
    container_name: checkin_service
    depends_on:
      - mysql
    ports:
      - "5003:5003"
    environment:
      - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/hotel

  checkout_service:
    build:
      context: ./
      dockerfile: Dockerfile
    image: hotel/checkout_service:1.0
    container_name: checkout_service
    depends_on:
      - mysql
      - rabbitmq
    ports:
      - "5004:5004"
    environment:
      - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/hotel

  customer_service:
    build:
      context: ./
      dockerfile: Dockerfile
    image: hotel/customer_service:1.0
    container_name: customer_service
    depends_on:
      - mysql
    ports:
      - "5005:5005"
    environment:
      - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/hotel

  housekeeping_service:
    build:
      context: ./
      dockerfile: Dockerfile
    image: hotel/housekeeping_service:1.0
    container_name: housekeeping_service
    depends_on:
      - mysql
    ports:
      - "5006:5006"
    environment:
      - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/hotel

  notification_service:
    build:
      context: ./
      dockerfile: Dockerfile
    image: hotel/notification_service:1.0
    container_name: notification_service
    depends_on:
      - mysql
    ports:
      - "5007:3000"
    environment:
      - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/hotel

  room_management_service:
    build:
      context: ./
      dockerfile: Dockerfile
    image: hotel/room_management_service:1.0
    container_name: room_management_service
    depends_on:
      - mysql
    ports:
      - "5007:5007"
    environment:
      - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/hotel

  room_service:
    build:
      context: ./
      dockerfile: Dockerfile
    image: hotel/room_service:1.0
    container_name: room_service
    depends_on:
      - mysql
    ports:
      - "5008:5008"
    environment:
      - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/hotel

  roster_service:
    build:
      context: ./
      dockerfile: Dockerfile
    image: hotel/roster_service:1.0
    container_name: roster_service
    depends_on:
      - mysql
    ports:
      - "5009:5009"
    environment:
      - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/hotel

  security_service:
    build:
      context: ./
      dockerfile: Dockerfile
    image: hotel/security_service:1.0
    container_name: security_service
    depends_on:
      - mysql
    ports:
      - "5010:5010"
    environment:
      - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/hotel

  user_service:
    build:
      context: ./
      dockerfile: Dockerfile
    image: hotel/user_service:1.0
    container_name: user_service
    depends_on:
      - mysql
    ports:
      - "5011:5011"
    environment:
      - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/hotel

  # RabbitMQ service for message queuing
  rabbitmq:
    image: rabbitmq:3-management
    container_name: hotel_rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  # AMQP setup service
  amqp_setup:
    build:
      context: ./
      dockerfile: Dockerfile
    image: hotel/amqp_setup:1.0
    container_name: amqp_setup
    command: python amqp_setup.py
    depends_on:
      - rabbitmq
    environment:
      - PYTHONUNBUFFERED=1
      - rabbit_host=rabbitmq
      - rabbit_port=5672
      - rabbit_username=guest
      - rabbit_password=guest
    restart: on-failure:5

  # Kong API Gateway
  kong-database:
    image: postgres:13
    container_name: kong-database
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kongpass
    volumes:
      - kong_data:/var/lib/postgresql/data

  kong-migrations:
    image: kong:latest
    container_name: kong-migrations
    depends_on:
      - kong-database
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kongpass
    command: kong migrations bootstrap
    restart: on-failure

  kong:
    image: kong:latest
    container_name: kong
    depends_on:
      - kong-database
      - kong-migrations
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kongpass
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    volumes:
      - ./register-kong.sh:/register-kong.sh
      - ./test-kong-services.sh:/test-kong-services.sh
    command: kong start

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus
    container_name: hotel_prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Grafana visualization
  grafana:
    image: grafana/grafana
    container_name: hotel_grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana

volumes:
  kong_data:
  prometheus_data:
  grafana_data:
