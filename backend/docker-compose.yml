services:

  db:
    image: mysql:8.0
    restart: always
    ports:
      - "3306:3306"
    networks:
      - hotel-network
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=hotel
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-database:
    image: postgres:17.4
    restart: always
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: password
    ports: 
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - hotel-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
  kong-migration:
    image: kong/kong-gateway:3.9
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - hotel-network
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  kong:
    image: kong/kong-gateway:3.9
    restart: always
    environment:
      KONG_ENFORCE_RBAC: "off" # optional, depending on your setup
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_UI: false  # Disable the HTML UI
      KONG_ADMIN_API_URI: http://localhost:8021
      KONG_ADMIN_GUI_URL: http://localhost:8022
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
    depends_on:
      - kong-migration
    ports:
      - "8020:8000"  # Proxy
      - "8021:8001"  # Admin API
      - "8022:8002"  # Kong Manager GUI
    networks:
      - hotel-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - hotel-network
    depends_on:
      - kong

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - hotel-network
    depends_on:
      - prometheus

  room_service:
    build:
      context: ./services/room
    ports:
      - "8007:8000"
    networks:
      - hotel-network
    environment:
      - DATABASE_URL=mysql://root:${MYSQL_ROOT_PASSWORD}@db:3306/hotel
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  booking_service:
    build:
      context: ./services/booking
    ports:
      - "8001:8000"
    networks:
      - hotel-network
    environment:
      - DATABASE_URL=mysql://root:${MYSQL_ROOT_PASSWORD}@db:3306/hotel
    depends_on:
      db:
        condition: service_healthy
      room_service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  payment_service:
    build:
      context: ./services/payment
    ports:
      - "8004:8000"
    networks:
      - hotel-network
    environment:
      - DATABASE_URL=mysql://root:${MYSQL_ROOT_PASSWORD}@db:3306/hotel
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth_service:
    build: 
      context: .
      dockerfile: services/auth/Dockerfile
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=mysql://root:${MYSQL_ROOT_PASSWORD}@db:3306/hotel
      - SECRET_KEY=your-secret-key-here
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "5009:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - hotel-network

  housekeeping_service:
    build:
      context: ./services/housekeeping
    ports:
      - "8008:8000"
    networks:
      - hotel-network
    environment:
      - DATABASE_URL=mysql://root:${MYSQL_ROOT_PASSWORD}@db:3306/hotel
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  roster_service:
    build:
      context: ./services/roster
    ports:
      - "8009:8000"
    networks:
      - hotel-network
    environment:
      - DATABASE_URL=mysql://root:${MYSQL_ROOT_PASSWORD}@db:3306/hotel
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  security_service:
    build:
      context: ./services/security
    ports:
      - "8002:8000"
    networks:
      - hotel-network
    environment:
      - DATABASE_URL=mysql://root:${MYSQL_ROOT_PASSWORD}@db:3306/hotel
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  notification_service:
    build:
      context: ./services/notification
    ports:
      - "8005:8000"
    networks:
      - hotel-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
      - TELESIGN_CUSTOMER_ID=${TELESIGN_CUSTOMER_ID}
      - TELESIGN_API_KEY=${TELESIGN_API_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  guest_service:
    build:
      context: ./services/guest
    ports:
      - "8012:8000"
    networks:
      - hotel-network
    environment:
      - DATABASE_URL=mysql://root:${MYSQL_ROOT_PASSWORD}@db:3306/hotel
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  price_service:
    build:
      context: ./services/price
    ports:
      - "8014:8000"
    networks:
      - hotel-network
    environment:
      - DATABASE_URL=mysql://root:${MYSQL_ROOT_PASSWORD}@db:3306/hotel
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  checkin_service:
    build:
      context: ./services/checkin
    ports:
      - "8010:8000"
    networks:
      - hotel-network
    environment:
      - BOOKING_SERVICE_URL=http://booking_service:8001
      - SECURITY_SERVICE_URL=http://security_service:8002
      - ROOM_SERVICE_URL=http://room_service:8007
      - CUSTOMER_SERVICE_URL=http://customer_service:8012
    depends_on:
      booking_service:
        condition: service_healthy
      security_service:
        condition: service_healthy
      room_service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    hostname: esd-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - hotel-network
    volumes: 
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mysql_data:
    name: hotel_mysql_data
  rabbitmq_data:
    name: esd_rabbitmq_data
  grafana_data:
    name: hotel_grafana_data
  pgdata:
    name: kong_pgdata

networks:
  hotel-network:
    driver: bridge
    name: hotel-network
