volumes:
  mysql_data:
    name: puki_mysql_data
  rabbitmq_data:
    name: esd_rabbitmq_data
  grafana_data:
    name: puki_grafana_data
  pgdata:
    name: kong_pgdata

networks:
  puki-network:
    driver: bridge
    name: puki-network
services:
  rabbitmq:
    image: rabbitmq:3-management
    hostname: puki-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-database:
    image: postgres:17.4
    restart: always
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: password
    ports: 
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migration:
    image: kong/kong-gateway:3.9
    command: "kong migrations bootstrap"
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  kong:
    image: kong/kong-gateway:3.9
    restart: always
    environment:
      KONG_ENFORCE_RBAC: "off" # optional, depending on your setup
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_UI: false  # Disable the HTML UI
      KONG_ADMIN_API_URI: http://localhost:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
    depends_on:
      - kong-migration
    ports:
      - "8000:8000" # Takes incoming HTTP traffic from Consumers, and forwards it to upstream Services.
      - "8001:8001" # Admin API. Listens for calls from the command line over HTTP.
      - "8002:8002" # Kong Manager (GUI). Listens for HTTP traffic.

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - kong

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  ###################################
  #1 Room: The Room microservice
  ###################################
  room:
    build:
      context: ./
      dockerfile: room.Dockerfile
    ports:
      - "5008:5008"
    networks:
      - puki-network
    environment:
      - DATABASE_URL=mysql+mysqlconnector://root:root@host.docker.internal:3306/puki
      - ROOM_URL=http://room:5008
      - BOOKING_URL=http://booking:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5008/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  ###################################
  #2 Booking: The Booking microservice
  ###################################
  booking:
    build:
      context: ./
      dockerfile: booking.Dockerfile
    ports:
      - "5002:5002"
    networks:
      - puki-network
    environment:
      - DATABASE_URL=mysql+mysqlconnector://root:root@host.docker.internal:3306/puki
      - GUEST_URL=http://guest:5011
      - PRICE_URL=http://price:5003
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  ###################################
  #3 Guest: The Guest microservice
  ###################################
  guest:
    build:
      context: ./
      dockerfile: guest.Dockerfile
    ports:
      - "5011:5011"
    networks:
      - puki-network
    environment:
      - DATABASE_URL=mysql+mysqlconnector://root:root@host.docker.internal:3306/puki
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5011/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  ###################################
  #4 Housekeeping: The Housekeeping microservice
  ###################################
  housekeeping:
    build:
      context: ./
      dockerfile: housekeeping.Dockerfile
    ports:
      - "5006:5006"
    networks:
      - puki-network
    environment:
      - DATABASE_URL=mysql+mysqlconnector://root:root@host.docker.internal:3306/puki
      - ROOM_URL=http://room:5008
      - ROSTER_URL=http://roster:5009
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  ###################################
  #5 Roster: The Roster microservice
  ###################################
  roster:
    build:
      context: ./
      dockerfile: roster.Dockerfile
    ports:
      - "5009:5009"
    networks:
      - puki-network
    environment:
      - DATABASE_URL=mysql+mysqlconnector://root:root@host.docker.internal:3306/puki
      - ROOM_URL=http://room:5008
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5009/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  ###################################
  #6 Keycard: The Keycard microservice
  ###################################
  keycard:
    build:
      context: ./
      dockerfile: keycard.Dockerfile
    ports:
      - "5012:5012"
    networks:
      - puki-network  
    environment:
      - DATABASE_URL=mysql+mysqlconnector://root:root@host.docker.internal:3306/puki
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5012/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  ###################################
  #7 Notification: The Notification microservice
  ###################################
  notification:
    build:
      context: ./
      dockerfile: notification.Dockerfile
    ports:
      - "5007:5007"
    networks:
      - puki-network
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5007/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  ###################################
  #8 Price: The Price microservice
  ###################################
  price:
    build:
      context: ./
      dockerfile: price.Dockerfile
    ports:
      - "5003:5003"
    networks:
      - puki-network
    environment:
      - DATABASE_URL=mysql+mysqlconnector://root:root@host.docker.internal:3306/puki
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  ###################################
  #9 Checkout: The Checkout Composite microservice
  ###################################
  checkout:
    build:
      context: ./
      dockerfile: checkout.Dockerfile
    ports:
      - "5004:5004"
    networks:
      - puki-network
    environment:
      - DATABASE_URL=mysql+mysqlconnector://root:root@host.docker.internal:3306/puki
      - GUEST_URL=http://guest:5011
      - BOOKING_URL=http://booking:5002
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  ###################################
  #10 Checkin: The Checkin microservice
  ###################################
  checkin:
    build:
      context: ./
      dockerfile: checkin.Dockerfile
    ports:
      - "5005:5005"
    networks:
      - puki-network
    environment:
      - DATABASE_URL=mysql+mysqlconnector://root:root@host.docker.internal:3306/puki
      - GUEST_URL=http://guest:5011
      - BOOKING_URL=http://booking:5002
      - ROOM_URL=http://room:5008
      - KEYCARD_URL=http://keycard:5012
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  ###################################
  #11 Make a Booking: The Make a Booking microservice 
  ###################################
  makebooking:
    build:
      context: ./
      dockerfile: makebooking.Dockerfile
    ports:
      - "5013:5013"
    networks:
      - puki-network
    environment:
      - DATABASE_URL=mysql+mysqlconnector://root:root@host.docker.internal:3306/puki
      - GUEST_URL=http://guest:5011
      - BOOKING_URL=http://booking:5002
      - PRICE_URL=http://price:5003
      - ROOM_URL=http://room:5008
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5013/health"]
      interval: 10s
      timeout: 5s
      retries: 5
